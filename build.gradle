import net.fabricmc.loom.task.RemapJarTask
import net.fabricmc.loom.task.ValidateMixinNameTask

import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = "https://maven.fabricmc.net/" }
    }
}

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id "io.github.p03w.machete" version "2.0.1" apply false // automatic jar compressing on build
    id "maven-publish"
}

@SuppressWarnings('unused')
def moduleDependency(Project project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: "namedElements") }

    project.dependencies {
        deps.each {
            api it
        }
    }
}

@SuppressWarnings('unused')
def testDependencies(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }

    project.dependencies {
        deps.each {
            testmodImplementation it
        }
    }
}

configurations.configureEach {
    resolutionStrategy {
        // fixes loom using a loader version from a dependency
        force("net.fabricmc:fabric-loader:$project.loader_version")
    }
}

moduleDependency(project, [
        "origins-fabric",
        "apoli",
        "calio"
])

allprojects  {
    apply plugin: "fabric-loom"

    group = project.mod_group_id
    base {
        archivesName = "${mod_id}"
    }
    version = "${mod_version}+mc${project.minecraft_version}${getStable()}${getBuildNumber()}"

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    java {
        withSourcesJar()
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "QuiltMC"
            url = "https://maven.quiltmc.org/repository/release"
        }
        maven {
            name = 'Ladysnake Mods'
            url = 'https://maven.ladysnake.org/releases'
        }
        maven {
            name = 'Ladysnake Mods (snapshots)'
            url = 'https://maven.ladysnake.org/snapshots'
        }
        maven {
            url = 'https://maven.cafeteria.dev'
            content {
                includeGroup 'net.adriantodt.fabricmc'
            }
        }
        maven {
            url "https://maven.jamieswhiteshirt.com/libs-release"
            content {
                includeGroup "com.jamieswhiteshirt"
            }
        }
        maven {
            url "https://maven.shedaniel.me/"
        }
        maven {
            url "https://maven.terraformersmc.com/"
        }
        maven {
            url "https://maven.ryanliptak.com/"
        }
    }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }

        test {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath

            compileClasspath += testmod.compileClasspath
            runtimeClasspath += testmod.runtimeClasspath
        }
    }

    loom {
        runtimeOnlyLog4j = true

        runs {
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmod
            }

            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
    }

    loom.runs.configureEach {
        vmArg("-enableassertions")
    }

    allprojects.each { p ->
        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
        }

        loom.mods.register(p.name + "-testmod") {
            sourceSet p.sourceSets.testmod
        }
    }

    dependencies {
        implementation 'com.demonwav.mcdev:annotations:1.0'
        include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.4.0")))
        // To change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        //	Cardinal Components
        include(modApi("org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        })
        include(modApi("org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        })

        //	PlayerAbilityLib
        include(modApi("io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"))

        //	Cloth Config
        include(modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        })

        //	Modmenu
        include(modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}"))

        //	Appleskin
        modCompileOnly("squeek.appleskin:appleskin-fabric:${appleskin_version}:api") {
            transitive = false
        }
        modCompileOnly "squeek.appleskin:appleskin-fabric:${appleskin_version}"

        include(implementation("org.quiltmc.parsers:json:0.2.1"))
        include(implementation("org.quiltmc.parsers:gson:0.2.1"))

        // Test dependencies
        testmodImplementation sourceSets.main.output

    }

    test {
        dependsOn("processResources")

        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }

        workingDir file("${rootDir}/run_tests")
    }

    tasks.withType(ProcessResources).configureEach {
        exclude '.cache'

        /*
        var replaceProperties = [
                mod_id              : mod_id,
                mod_version         : mod_version,
                minecraft_version   : minecraft_version,
                loader_version      : loader_version,
                fabric_version      : fabric_version,
                calio_version          : project(":calio").version,
                apoli_version          : project(":apoli").version
        ]

        inputs.properties replaceProperties

        filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
            expand replaceProperties + [project: project]
        }
        */
    }

    tasks.register('testmodJar', Jar) {
        from sourceSets.testmod.output

        destinationDirectory = project.getLayout().getBuildDirectory().dir("devlibs")
        archiveClassifier = "testmod"
    }

    tasks.register('remapTestmodJar', RemapJarTask) {
        dependsOn testmodJar
        input = testmodJar.archiveFile
        archiveClassifier = "testmod"
        addNestedDependencies = false
    }
    build.dependsOn remapTestmodJar

    tasks.register('validateMixinNames', ValidateMixinNameTask) {
        source(sourceSets.main.output)
        source(sourceSets.testmod.output)
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "io.github.p03w.machete"

    dependencies {
        testmodImplementation sourceSets.main.output
    }

    fabricApi {
        configureDataGeneration()
    }

    loom {
        runs {
            datagen {
                ideConfigGenerated = true
                vmArg "-Dfabric-api.datagen.modid=$mod_id"
            }
        }
    }

    tasks.register("generateResources") {
        group = "fabric"
        generateResources.dependsOn runDatagen
    }

    machete {
//    enabled = System.getenv("GITHUB_RUN_NUMBER") != null
        json.enabled = false
        finalizeAfter = ""
        ignoredTasks.add("jar")
        additionalTasks.add("remapJar")
    }

    tasks.remapJar.finalizedBy('optimizeOutputsOfRemapJar')

    tasks.register('optimizedJar') {
        dependsOn 'optimizeOutputsOfRemapJar'
    }
    tasks.build.dependsOn optimizedJar

    tasks.named('jar', Jar).configure {
        from("LICENSE") {
            rename { "${it}_${base.archivesName.get()}"}
        }

        manifest {
            attributes([
                    'Specification-Title'     : mod_id,
                    'Specification-Vendor'    : "apace100",
                    'Specification-Version'   : '1', // We are version 1 of ourselves
                    'Implementation-Title'    : name,
                    'Implementation-Version'  : jar.archiveVersion,
                    'Implementation-Vendor'   : "apace100",
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    tasks.register('printVersionName') {
        println "${mod_id} version: ${version}"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifactId = base.archivesName.get()
                }

                artifact(remapJar) {
                    builtBy(tasks.named('optimizedJar'))
                }

                artifact(sourcesJar) {
                    builtBy(remapSourcesJar)
                }
            }
        }
    }
}

dependencies {
    afterEvaluate {
        subprojects.each {
            api project(path: "${it.path}", configuration: "namedElements")

            implementation project(":${it.path}").sourceSets.testmod.output
        }
    }
}

loom {
    runs {
        client {
            client()
            property("fabric.modsFolder=${Paths.get(project.getProjectDir().toString(), it.runDir, "mods${project.minecraft_version}")}")

            property("mixin.debug.export=true") // export all mixins
            property("mixin.debug.strict.unique=true") // strictly enforce that @Unique things are private
        }

        server {
            server()
            property("fabric.modsFolder=${Paths.get(project.getProjectDir().toString(), it.runDir, "mods${project.minecraft_version}")}")
        }
    }
}


subprojects.each {
    remapJar.dependsOn("${it.path}:optimizedJar")
    remapTestmodJar.dependsOn("${it.path}:remapTestmodJar")
}

remapJar {
    afterEvaluate {
        subprojects {
            nestedJars.from project("${it.path}").tasks.named("remapJar")
        }
    }

    addNestedDependencies = true
}

remapTestmodJar {
    afterEvaluate {
        subprojects {
            if (!(it.file("src/testmod").exists() || it.file("src/testmodClient").exists())) {
                return
            }

            nestedJars.from project("${it.path}").tasks.named("remapTestmodJar")
        }
    }

    addNestedDependencies = true
}

// Define a task to copy all outputs from sub-projects to a central location
tasks.register('copyOutputs', Copy) {
    from subprojects.collect {
        mustRunAfter it.tasks.build
        it.getLayout().getBuildDirectory().dir("libs")
    }
    into getLayout().getBuildDirectory().dir("libs")
}

// Make the build task depend on the copyOutputs task
build.finalizedBy(copyOutputs)

static def getBuildNumber() {
    return "-local"
}

static def getStable() {
    return ""
}
